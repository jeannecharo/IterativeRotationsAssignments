#
# Fortran and C compilers
#
F90 = gfortran
CC=gcc

#
# lapack flag. 
# You can use: -L/path/to/lapack/ instead
#
LIBLAPACK = -llapack
LIBS += $(LIBLAPACK)


#
# compilation flags
#
FFLAGS = -fdefault-real-8 -fcheck=bounds
CFLAGS =

#
# directories
#
SRC := $(CURDIR)
SRCDIR := $(realpath $(SRC)/../../src)
INTERFDIR = $(realpath $(SRC)/../../interface)

#
# include directory of header for C program
#
C_INCLUDE = -I$(INTERFDIR)



##------------------
##
## Options for compilation with the shared library libira.so, or static libira.a
## SRCDIR is path to IRA/src/
## 

# Using shared library:
#
IRALIB = -L$(SRCDIR) -lira -Wl,-rpath,$(SRCDIR)


# Using the static library: uncomment the following:
#
#IRALIB = $(SRCDIR)/libira.a
#LIBMATH = -lm
#LIBFORTRAN = -lgfortran
#LIBS += $(LIBMATH) $(LIBFORTRAN)
#------------------



#
# Produced filenames
#
F_PROG = f90_program.x
C_PROG = c_program.x




#=======================
# object files of programs
#
fprog := $(SRC)/f90_program.f90
cprog := $(SRC)/c_program.c
#======================


default: msg

all : f90 cprog

f90: $(F_PROG)
cprog: $(C_PROG)

#====
# Compile the f90 executable
#====
$(F_PROG): $(fprog)
	$(F90) $(FFLAGS) -o $@ $^ $(IRALIB) $(LIBS)

#====
# Compile the C executable
#====
$(C_PROG): $(cprog)
	$(CC) $(CFLAGS) $(C_INCLUDE) -o $@ $^ $(IRALIB) $(LIBS)


msg:
	@echo 'Use one of the following:'
	@echo ''
	@echo ' make f90     -> compiles the f90 example program $(F_PROG) executable'
	@echo ' make cprog   -> compiles the C example program $(C_PROG)'
	@echo ' make all     -> all of the above'
	@echo ''
	@echo ' make clean   -> remove all files generated by make'
	@echo ''
	@echo 'Quitting.'




clean:
	rm -rf $(F_PROG) $(C_PROG)



