#
# Fortran compiler
#
FCOMP = gfortran

#
# archiver
#
AR = ar

#
# lapack flag. 
# You can use: -L/path/to/lapack/ instead
#
LIBLAPACK = -llapack

#
# compilation flags
#
FFLAGS = -Wall -fdefault-real-8 -fbounds-check

SRC = $(PWD)
OBJ = $(SRC)/Obj

MOD = -I$(OBJ) -J$(OBJ)



# Produced filenames
#
IRAUNI_X = ira_main.x
IRALIB = libira.a


#=======================
# object files
#
# utils
futils := \
	$(SRC)/sorting_module.f90 \
	$(SRC)/set_candidate.f90 \
	$(SRC)/cshda.f90 \
	$(SRC)/ira_routines.f90
outils:= $(patsubst $(SRC)%,$(OBJ)%,$(futils:%.f90=%.o))

fread := $(SRC)/read_typ.f90
oread := $(patsubst $(SRC)%, $(OBJ)%, $(fread:%.f90=%.o))

f_uni := $(SRC)/ira_main.f90
o_uni := $(patsubst $(SRC)%, $(OBJ)%, $(f_uni:%.f90=%.o))
#======================


default: msg

all : univ lib

$(OBJ)%.o: $(SRC)/%.f90
	$(FCOMP) $(FFLAGS) $(MOD) -c $< -o $@


univ: $(OBJ) $(IRAUNI_X)
lib: $(OBJ) $(IRALIB)

#
# object folder
#
$(OBJ):
	@if [ ! -d $(OBJ) ]; then mkdir $(OBJ) ; fi


#====
# Compile the executable
#====
$(IRAUNI_X): $(outils) $(oread) $(o_uni)
	$(FCOMP) $(FFLAGS) $(MOD) $^ -o $@ $(LIBLAPACK)


#====
# pack the library
#====
$(IRALIB): $(outils)
	$(AR) -rcv $@ $^

msg:
	@echo 'Use one of the following:'
	@echo ''
	@echo ' make main    -> compiles the main program $(IRAUNI_X) executable'
	@echo ' make lib     -> compiles the $(IRALIB) library'
	@echo ' make all     -> compiles the main program, and packs the library'
	@echo ''
	@echo ' make clean   -> remove all files generated by make'
	@echo ''
	@echo 'Quitting.'




clean:
	rm -rf $(IRAUNI_X)
	rm -rf $(OBJ)


