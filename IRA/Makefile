#
# Fortran compiler
#
FCOMP = gfortran
CCOMP=gcc

#
# archiver
#
AR = ar

#
# lapack flag. 
# You can use: -L/path/to/lapack/ instead
#
LIBLAPACK = -llapack

#
# compilation flags
#
FFLAGS = -Wall -fdefault-real-8 -fbounds-check

SRC = $(PWD)
OBJ = $(SRC)/Obj

MOD = -I$(OBJ) -J$(OBJ)



# Produced filenames
#
IRAUNI_X = f90_program.x
IRALIB = libira.a
SHLIB = shlib_ira.so
CPROG = c_program.x


#=======================
# object files
#
# utils
futils := \
	$(SRC)/sorting_module.f90 \
	$(SRC)/set_candidate.f90 \
	$(SRC)/cshda.f90 \
	$(SRC)/ira_routines.f90
outils:= $(patsubst $(SRC)%,$(OBJ)%,$(futils:%.f90=%.o))

fread := $(SRC)/read_typ.f90
oread := $(patsubst $(SRC)%, $(OBJ)%, $(fread:%.f90=%.o))

f_uni := $(SRC)/f90_program.f90
o_uni := $(patsubst $(SRC)%, $(OBJ)%, $(f_uni:%.f90=%.o))

flib := $(SRC)/library_ira.f90
olib := $(patsubst $(SRC)%,$(OBJ)%,$(flib:%.f90=%.o))

cprog := $(SRC)/c_program.c
#======================


default: msg

all : lib f90 shlib cprog

$(OBJ)%.o: $(SRC)/%.f90
	$(FCOMP) $(FFLAGS) $(MOD) -c $< -o $@


f90: $(OBJ) $(IRAUNI_X)
lib: $(OBJ) $(IRALIB)
shlib: $(OBJ) $(SHLIB)
cprog: $(OBJ) $(SHLIB) $(CPROG)

#
# object folder
#
$(OBJ):
	@if [ ! -d $(OBJ) ]; then mkdir $(OBJ) ; fi


#====
# pack the library
#====
$(IRALIB): $(outils)
	$(AR) -rcv $@ $^

#====
# pack the shared library
#====
$(SHLIB): $(olib) $(outils)
	$(FCOMP) -o $@ -shared -fPIC $(MOD) $^ $(FLAGS) $(LIBLAPACK)

#====
# Compile the f90 executable
#====
$(IRAUNI_X): $(outils) $(oread) $(o_uni)
	$(FCOMP) $(FFLAGS) $(MOD) $^ -o $@ $(LIBLAPACK)

#====
# Compile the C executable
#====
$(CPROG): $(cprog)
	$(CCOMP) -o $@ $^ $(SHLIB)


#====
# generate the python module
#====
#$(PY_MOD): $(futils)
#	f2py3 $(LIBLAPACK) -c --fcompiler=$(FCOMP) --f90flags='$(FFLAGS)' ira_interf.pyf $^ -m $(PY_MOD)

msg:
	@echo 'Use one of the following:'
	@echo ''
	@echo ' make f90     -> compiles the f90 example program $(IRAUNI_X) executable'
	@echo ' make cprog   -> compiles the C example program $(CPROG)'
	@echo ' make lib     -> compiles the $(IRALIB) library'
	@echo ' make shlib   -> compiles the $(SHLIB) shared library'
	@echo ' make all     -> all of the above'
	@echo ''
	@echo ' make clean   -> remove all files generated by make'
	@echo ''
	@echo 'Quitting.'




clean:
	rm -rf $(IRAUNI_X) $(IRALIB) $(SHLIB) $(CPROG)
	rm -rf $(OBJ)


