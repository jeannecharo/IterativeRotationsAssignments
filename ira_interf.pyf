!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module ira_mod ! in 
    interface  ! in :ira_mod
        ! module sorting_module ! in :ira_mod:sorting_module.f90
        !     subroutine merge_a(a,b,c,ax) ! in :ira_mod:sorting_module.f90:sorting_module
        !         real(8), target,dimension(:,:),intent(in) :: a
        !         real(8), target,dimension(:,:),intent(in) :: b
        !         real(8), target,dimension(:,:),intent(inout) :: c
        !         integer intent(in) :: ax
        !     end subroutine merge_a
        !     subroutine swap(ndim,x,y) ! in :ira_mod:sorting_module.f90:sorting_module
        !         integer, optional,intent(in),check(shape(x, 0) == ndim),depend(x) :: ndim=shape(x, 0)
        !         real(8) dimension(ndim),intent(inout) :: x
        !         real(8) dimension(ndim),intent(inout),depend(ndim) :: y
        !     end subroutine swap
        !     subroutine mergesort(a,work,ax) ! in :ira_mod:sorting_module.f90:sorting_module
        !         real(8) dimension(:,:),intent(inout) :: a
        !         real(8) dimension(:,:),intent(inout) :: work
        !         integer intent(in) :: ax
        !     end subroutine mergesort
        ! end module sorting_module


        subroutine cshda(nat1,typ1,coords1,nat2,typ2,coords2,some_threshold,found,dists) ! in :ira_mod:cshda.f90
            integer, intent(in) :: nat1=
            integer dimension(nat1),intent(in), depend(nat1) :: typ1
            real(8) dimension(3,nat1),intent(in), depend(nat1) :: coords1
            integer, intent(in):: nat2
            integer dimension(nat2),intent(in), depend(nat2) :: typ2
            real(8) dimension(3,nat2),intent(in),depend(nat2) :: coords2
            real(8) intent(in) :: some_threshold
            integer dimension(nat2),intent(out),depend(nat2) :: found
            real(8) dimension(nat2),intent(out),depend(nat2) :: dists
        end subroutine cshda
        subroutine cshda_pbc(nat1,typ1,coords1,nat2,typ2,coords2,lat2,some_thr,found,dists) ! in :ira_mod:cshda.f90
            integer, intent(in) :: nat1
            integer dimension(nat1),intent(in), depend(nat1) :: typ1
            real(8) dimension(3,nat1),intent(in),depend(nat1) :: coords1
            integer ,intent(in) :: nat2
            integer dimension(nat2),intent(in), depend(nat2) :: typ2
            real(8) dimension(3,nat2),intent(in),depend(nat2) :: coords2
            real(8) dimension(3,3),intent(in) :: lat2
            real(8) intent(in) :: some_thr
            integer dimension(nat2),intent(out),depend(nat2) :: found
            real(8) dimension(nat2),intent(out),depend(nat2) :: dists
        end subroutine cshda_pbc
        subroutine svdrot_m(nat1,typ1,coords1_in,nat2,typ2,coords2_in,rmat,translate) ! in :ira_mod:ira_routines.f90
            integer, intent(in) :: nat1
            integer dimension(nat1),intent(in), depend(nat1) :: typ1
            real(8) dimension(3,nat1),intent(in),depend(nat1) :: coords1_in
            integer, intent(in) :: nat2
            integer dimension(nat2),intent(in), depend(nat2) :: typ2
            real(8) dimension(3,nat2),intent(in),depend(nat2) :: coords2_in
            real(8) dimension(3,3),intent(out) :: rmat
            real(8) dimension(3),intent(out) :: translate
        end subroutine svdrot_m
        subroutine ira_unify(nat1,typ1_in,coords1_in,candidate_1,nat2,typ2_in,coords2_in,candidate_2,kmax_factor,rotation,translation,permutation,hd_out) ! in :ira_mod:ira_routines.f90
            integer, intent(in) :: nat1
            integer dimension(nat1),intent(in), depend(nat1) :: typ1_in
            real(8) dimension(3,nat1),intent(in),depend(nat1) :: coords1_in
            integer dimension(nat1),intent(in),depend(nat1) :: candidate_1
            integer, intent(in) :: nat2
            integer dimension(nat2),intent(in), depend(nat2) :: typ2_in
            real(8) dimension(3,nat2),intent(in),depend(nat2) :: coords2_in
            integer dimension(nat2),intent(in),depend(nat2) :: candidate_2
            real(8) intent(in) :: kmax_factor
            real(8) dimension(3,3),intent(out) :: rotation
            real(8) dimension(3),intent(out) :: translation
            integer dimension(nat2),intent(out),depend(nat2) :: permutation
            real(8) intent(out) :: hd_out
        end subroutine ira_unify
        subroutine set_candidates(nat1,typ1,coords1,nat2,typ2,coords2,candidate1,candidate2) ! in :ira_mod:set_candidate.f90
            integer, intent(in) :: nat1
            integer dimension(nat1),intent(in), depend(nat1) :: typ1
            real(8) dimension(3,nat1),intent(in),depend(nat1) :: coords1
            integer, intent(in) :: nat2
            integer dimension(nat2),intent(in), depend(nat2) :: typ2
            real(8) dimension(3,nat2),intent(in),depend(nat2) :: coords2
            integer dimension(nat1),intent(out),depend(nat1) :: candidate1
            integer dimension(nat2),intent(out),depend(nat2) :: candidate2
        end subroutine set_candidates
        ! subroutine select_rc(nat,coords,c_idx,rc) ! in :ira_mod:set_candidate.f90
        !     integer, optional,intent(in),check(shape(coords, 1) == nat),depend(coords) :: nat=shape(coords, 1)
        !     real(8) dimension(3,nat),intent(in) :: coords
        !     integer intent(in) :: c_idx
        !     real(8) dimension(3),intent(out) :: rc
        ! end subroutine select_rc
        subroutine ira_svd( nat1, typ1_in, coords1_in, nat2, typ2_in, coords2_in, kmax_factor, rotation, translation, permutation, hd, rmsd )
          integer, intent(in) :: nat1
          integer, dimension(nat1), intent(in),depend(nat1) :: typ1_in
          real(8), dimension(3,nat1), intent(in),depend(nat1) :: coords1_in
          integer, intent(in) :: nat2
          integer, dimension(nat2), intent(in),depend(nat2) :: typ2_in
          real(8), dimension(3,nat2), intent(in),depend(nat2) :: coords2_in
          real(8), intent(in) :: kmax_factor
          real(8), dimension(3,3), intent(out) :: rotation
          real(8), dimension(3), intent(out) :: translation
          integer, dimension(nat2), intent(out),depend(nat2) :: permutation
          real(8), intent(out) :: hd
          real(8), intent(out) :: rmsd
        end subroutine ira_svd
    end interface 
end python module ira_mod

! This file was auto-generated with f2py (version:1.22.3).
! See:
! https://web.archive.org/web/20140822061353/http://cens.ioc.ee/projects/f2py2e
