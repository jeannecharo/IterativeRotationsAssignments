.. _howto:

#############
How-to guides
#############


.. note::

   The guides are given for python use. The same can be done from C/Fortran by calls to
   appropriate routines, which generally correspond in the name to the ones from python.
   For more info refer to :ref:`ref_api` and :ref:`src_refs`.


ideas

 - get matrix from axis-angle representation;
 - get axis-angle (Schoenflies) representation of a matrix;
 - generate a cyclic group from a number of input orthonormal matrices;
 - determine point group from a list of orthonormal matrices;


.. contents:: Contents
   :local:
   :depth: 2


Importing the ira module
========================

The IRA library is imported into python by:

>>> import ira_mod

The corresponding algorithm class (IRA or SOFI) has to be initialised by:

>>> ira = ira_mod.IRA()

or

>>> sofi = ira_mod.SOFI()

now, the functions in either class are availably by typing ``ira.<funtion_name>`` or ``sofi.<function_name>``.
Quick help can be accessed by ``help( ira )``, ``help( ira.<function_name> )`` or the same for ``sofi``.


If the ``ira_mod`` module cannot be found at ``import``, then make sure there is a path to ``/IRA_library/interface``
in the environment variable ``PYTHONPATH``.

.. code-block:: bash

   echo $PYTHONPATH

If not, add it by:

.. code-block:: bash

   export PYTHONPATH=/your/path/to/IRA_library/interface:$PYTHONPATH


Construct matrices from axis-angle representation
=================================================

Given an operation in the Schoenflies notation, e.g. S 12^5, the corresponding 3x3 matrix
can be generated by using the ``construct_operation()`` function, given the axis ``ax`` by:

   >>> ## define the axis
   >>> ax = np.array([ 0.0, 0.0, 1.0] )
   >>> ## construct operation S 12^5 along the axis
   >>> matrix = sofi.construct_operation( "S", ax, 5/12 )
   >>> matrix
   array([[-0.8660254, -0.5      ,  0.       ],
          [ 0.5      , -0.8660254,  0.       ],
          [ 0.       ,  0.       , -1.       ]])
   >>> ## giving negative angle should return the transposed matrix
   >>> matrix = sofi.construct_operation( "S", ax, -5/12 )
   >>> matrix
   array([[-0.8660254,  0.5      ,  0.       ],
          [-0.5      , -0.8660254,  0.       ],
          [ 0.       ,  0.       , -1.       ]])

.. note::
   The axis ``ax`` on input does not need to be normalised.


Obtain axis-angle and Shoenflies fom matrix
===========================================

A given orthonormal 3x3 matrix can be analysed to obtain its Schoeflies representation of the format ``Op n^p``,
and the axis-angle representation by calling the ``analmat()`` function:

   >>> ## create a matrix for C 5^2 along axis (1.0, -1.0, 1.0)
   >>> matrix = sofi.construct_operation( "C", np.array([1.0, -1.0, 1.0]), 2/5 )
   >>> ## analyse it
   >>> sofi.analmat( matrix )
   ('C', 5, 2, array([ 0.57735027, -0.57735027,  0.57735027]), 0.4)
   >>> ## save the output
   >>> op, n, p, ax, angle = sofi.analmat( matrix )

The Schoeflies symbol is then ``Op n^p``. The ``angle`` is in units :math:`1/2\pi`, i.e. ``angle=0.5`` is half
the full circle.

NOTE the axis ``ax`` comes from a diagonalisation procedure, therefore any :math:`\pm` direction is a
valid solution. To remove this ambiguity, the convention is that the axis is flipped such that its component are
:math:`z>0`, if :math:`z=0` then :math:`x>0`, and if :math:`x=0` then :math:`y>0` (all within
threshold of numerical precision, which is ``epsilon=1e-6`` by default). The orientation of the angle is then decided based on this axis convention.
Therefore it can happen that analysis of a matrix constructed as:

   >>> matrix = sofi.construct_operation( "C", np.array([-0.3, 1.0, 0.0]), 3/8 )

will flip its axis and angle :

   >>> sofi.analmat(matrix)
   ('C', 8, 3, array([ 2.87347886e-01, -9.57826285e-01, -1.60749682e-16]), -0.375 )



